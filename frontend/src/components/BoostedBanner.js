import React, { useEffect, useRef, useState } from "react";
import CountUp from "react-countup";
import "./BoostedBanner.css";

const API_URL = process.env.REACT_APP_BACKEND_URL || "http://localhost:4000";

const BoostedBanner = () => {
  const [boosted, setBoosted] = useState(null);
  const [showWowEffect, setShowWowEffect] = useState(false);
  const [hasSpokenOnLoad, setHasSpokenOnLoad] = useState(false);
  const [newSaleNotification, setNewSaleNotification] = useState(null);
  const [notificationKey, setNotificationKey] = useState(0);
  const [showVoiceButton, setShowVoiceButton] = useState(false);
  const [hasUserInteracted, setHasUserInteracted] = useState(false);
  const prevBoosted = useRef(null);
  const hasSpokenRef = useRef(false);

  // Func»õie pentru detectarea dispozitivelor mobile
  const isMobileDevice = () => {
    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ||
           window.innerWidth <= 768 ||
           ('ontouchstart' in window) ||
           (navigator.maxTouchPoints > 0);
  };

  // Func»õie pentru convertirea numerelor √Æn text
  const numberToWords = (num) => {
    const ones = ['', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'];
    const teens = ['ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen'];
    const tens = ['', '', 'twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninety'];
    
    if (num === 0) return 'zero';
    if (num < 10) return ones[num];
    if (num < 20) return teens[num - 10];
    if (num < 100) {
      return tens[Math.floor(num / 10)] + (num % 10 !== 0 ? ' ' + ones[num % 10] : '');
    }
    if (num < 1000) {
      return ones[Math.floor(num / 100)] + ' hundred' + (num % 100 !== 0 ? ' ' + numberToWords(num % 100) : '');
    }
    if (num < 1000000) {
      return numberToWords(Math.floor(num / 1000)) + ' thousand' + (num % 1000 !== 0 ? ' ' + numberToWords(num % 1000) : '');
    }
    if (num < 1000000000) {
      return numberToWords(Math.floor(num / 1000000)) + ' million' + (num % 1000000 !== 0 ? ' ' + numberToWords(num % 1000000) : '');
    }
    return 'very large number';
  };

  // Func»õie pentru citirea vocale a sumei
  const speakAmount = (amount) => {
    if (!('speechSynthesis' in window)) {
      console.log("‚ùå Speech synthesis not supported");
      return;
    }

    // Opre»ôte orice voce √Æn curs de redare
    speechSynthesis.cancel();
    
    // Pentru mobil - verificƒÉ dacƒÉ utilizatorul a interac»õionat
    if (isMobileDevice() && !hasUserInteracted) {
      console.log("üì± Mobil detectat - afi»ôez butonul pentru voce");
      setShowVoiceButton(true);
      return;
    }
    
    // Pentru desktop - continuƒÉ direct cu citirea vocalƒÉ
    console.log("üñ•Ô∏è Desktop detectat - citire vocalƒÉ automatƒÉ");
    
    const roundedAmount = Math.floor(amount); // EliminƒÉ zecimalele
    const amountText = numberToWords(roundedAmount);
    
    // Prima parte: suma
    const amountSpeechText = `BitSwapDEX AI project has raised ${amountText} dollars.`;
    
    console.log(`üîä Citire vocalƒÉ partea 1: "${amountSpeechText}"`);
    
    const amountUtterance = new SpeechSynthesisUtterance(amountSpeechText);
    amountUtterance.rate = 0.8;
    amountUtterance.pitch = 0.9;
    amountUtterance.volume = 0.8;
    
    // A doua parte: explica»õia despre lichiditate
    const liquiditySpeechText = "This amount will be used to ensure liquidity for exchange listings.";
    
    console.log(`üîä Citire vocalƒÉ partea 2: "${liquiditySpeechText}"`);
    
    const liquidityUtterance = new SpeechSynthesisUtterance(liquiditySpeechText);
    liquidityUtterance.rate = 0.8;
    liquidityUtterance.pitch = 0.9;
    liquidityUtterance.volume = 0.8;
    
    // A treia parte: despre pre»õul de listare
    const listingPriceSpeechText = "The listing price will be significantly higher than the current presale round.";
    
    console.log(`üîä Citire vocalƒÉ partea 3: "${listingPriceSpeechText}"`);
    
    const listingPriceUtterance = new SpeechSynthesisUtterance(listingPriceSpeechText);
    listingPriceUtterance.rate = 0.8;
    listingPriceUtterance.pitch = 0.9;
    listingPriceUtterance.volume = 0.8;
    
    // A patra parte: mul»õumiri »ôi urƒÉri de succes
    const thanksSpeechText = "Thank you for your trust in the BITS project. We wish success to everyone!";
    
    console.log(`üîä Citire vocalƒÉ partea 4: "${thanksSpeechText}"`);
    
    const thanksUtterance = new SpeechSynthesisUtterance(thanksSpeechText);
    thanksUtterance.rate = 0.8;
    thanksUtterance.pitch = 0.9;
    thanksUtterance.volume = 0.8;
    
    // A cincea parte: despre AI »ôi tehnologii moderne
    const aiSpeechText = "This project combines artificial intelligence and modern blockchain technologies to create the future of decentralized finance.";
    
    console.log(`üîä Citire vocalƒÉ partea 5: "${aiSpeechText}"`);
    
    const aiUtterance = new SpeechSynthesisUtterance(aiSpeechText);
    aiUtterance.rate = 0.8;
    aiUtterance.pitch = 0.9;
    aiUtterance.volume = 0.8;
    
    // Redare secven»õialƒÉ cu pauze
    try {
      speechSynthesis.speak(amountUtterance);
      
      amountUtterance.onend = () => {
        setTimeout(() => {
          speechSynthesis.speak(liquidityUtterance);
        }, 3000); // PauzƒÉ de 3 secunde
      };
      
      liquidityUtterance.onend = () => {
        setTimeout(() => {
          speechSynthesis.speak(listingPriceUtterance);
        }, 1000); // PauzƒÉ de 1 secundƒÉ
      };
      
      listingPriceUtterance.onend = () => {
        setTimeout(() => {
          speechSynthesis.speak(thanksUtterance);
        }, 1000); // PauzƒÉ de 1 secundƒÉ
      };
      
      thanksUtterance.onend = () => {
        setTimeout(() => {
          speechSynthesis.speak(aiUtterance);
        }, 1000); // PauzƒÉ de 1 secundƒÉ
      };
      
      // Error handling pentru fiecare utterance
      [amountUtterance, liquidityUtterance, listingPriceUtterance, thanksUtterance, aiUtterance].forEach(utterance => {
        utterance.onerror = (event) => {
          console.error("‚ùå Eroare la citirea vocalƒÉ:", event.error);
        };
      });
      
    } catch (error) {
      console.error("‚ùå Eroare la ini»õierea citirii vocale:", error);
    }
  };

  // Func»õie pentru activarea efectului wow cu variante
  const triggerWowEffect = () => {
    const variants = ['wow', 'wow2', 'wow3', 'wow4'];
    const randomVariant = variants[Math.floor(Math.random() * variants.length)];
    setShowWowEffect(randomVariant);
    
    // Durate diferite pentru fiecare variantƒÉ
    const durations = {
      'wow': 2000,    // 2 secunde
      'wow2': 2500,   // 2.5 secunde
      'wow3': 3000,   // 3 secunde
      'wow4': 4000    // 4 secunde pentru efectul fullscreen
    };
    
    setTimeout(() => setShowWowEffect(false), durations[randomVariant]);
  };

  // Lista de »õƒÉri permise (excluz√¢nd SUA, Rusia, China, Nigeria »ôi alte »õƒÉri suspecte)
  const allowedCountries = [
    'Canada', 'United Kingdom', 'Germany', 'France', 'Italy', 'Spain', 'Netherlands',
    'Switzerland', 'Sweden', 'Norway', 'Denmark', 'Finland', 'Belgium', 'Austria',
    'Portugal', 'Ireland', 'Poland', 'Czech Republic', 'Hungary', 'Slovakia',
    'Slovenia', 'Croatia', 'Estonia', 'Latvia', 'Lithuania', 'Bulgaria', 'Romania',
    'Greece', 'Cyprus', 'Malta', 'Luxembourg', 'Iceland', 'Australia', 'New Zealand',
    'Japan', 'South Korea', 'Singapore', 'Hong Kong', 'Taiwan', 'Thailand', 'Malaysia',
    'Philippines', 'Vietnam', 'Indonesia', 'India', 'Brazil', 'Argentina', 'Chile',
    'Colombia', 'Peru', 'Mexico', 'Uruguay', 'Paraguay', 'Ecuador', 'Venezuela',
    'South Africa', 'Kenya', 'Ghana', 'Morocco', 'Egypt', 'Tunisia',
    'Turkey', 'Israel', 'UAE', 'Saudi Arabia', 'Qatar', 'Kuwait', 'Bahrain',
    'Oman', 'Jordan', 'Lebanon'
  ];

  // Func»õie pentru selectarea »õƒÉrii bazatƒÉ pe suma (pentru sincronizare cross-device)
  const getCountryForAmount = (amount) => {
    // Folosim suma ca seed pentru a genera aceea»ôi »õarƒÉ pentru aceea»ôi sumƒÉ
    const seed = Math.floor(amount * 100); // Convertim la √Æntreg pentru consisten»õƒÉ
    const index = seed % allowedCountries.length;
    return allowedCountries[index];
  };

  // Func»õie pentru selectarea cryptomonedei bazatƒÉ pe sumƒÉ (sync cross-device)
  const getCryptoForAmount = (amount) => {
    const cryptoOptions = [
      { name: 'BNB', symbol: 'BNB', weight: 35, color: '#F3BA2F' }, // 35% - preponderent
      { name: 'Solana', symbol: 'SOL', weight: 30, color: '#9945FF' }, // 30% - preponderent  
      { name: 'Ethereum', symbol: 'ETH', weight: 15, color: '#627EEA' }, // 15%
      { name: 'USDT', symbol: 'USDT', weight: 10, color: '#26A17B' }, // 10%
      { name: 'USDC', symbol: 'USDC', weight: 5, color: '#2775CA' }, // 5%
      { name: 'Polygon', symbol: 'MATIC', weight: 3, color: '#8247E5' }, // 3%
      { name: 'Shiba Inu', symbol: 'SHIB', weight: 2, color: '#FFA409' } // 2%
    ];
    
    // Folosim suma pentru a genera consistent aceea»ôi crypto
    const seed = Math.floor(amount * 1000) % 100; // 0-99
    let weightSum = 0;
    
    for (const crypto of cryptoOptions) {
      weightSum += crypto.weight;
      if (seed < weightSum) {
        return crypto;
      }
    }
    
    // Fallback la BNB
    return cryptoOptions[0];
  };

  // Func»õie pentru for»õarea interac»õiunii utilizatorului pe mobil
  const forceUserInteraction = () => {
    if (isMobileDevice() && !hasUserInteracted) {
      console.log("üì± For»õez afi»ôarea butonului de voce pe mobil");
      setShowVoiceButton(true);
      
      // Ascunde butonul dupƒÉ 10 secunde dacƒÉ nu a fost apƒÉsat
      setTimeout(() => {
        if (!hasUserInteracted) {
          setShowVoiceButton(false);
          console.log("‚è∞ Butonul de voce ascuns automat dupƒÉ 10 secunde");
        }
      }, 10000);
    }
  };

  // Func»õie pentru declan»ôarea vocii pe mobil
  const handleVoiceButtonClick = () => {
    console.log("üé§ Utilizatorul a apƒÉsat butonul de voce pe mobil");
    
    // MarcheazƒÉ cƒÉ utilizatorul a interac»õionat
    setHasUserInteracted(true);
    setShowVoiceButton(false);
    
    // VerificƒÉ dacƒÉ speech synthesis este disponibil
    if (!('speechSynthesis' in window)) {
      console.error("‚ùå Speech synthesis not supported in this browser");
      alert("Voice feature is not supported in this browser. Please try Chrome or Safari.");
      return;
    }
    
    // Pentru Chrome pe mobil - for»õeazƒÉ √ÆncƒÉrcarea vocilor
    if (isMobileDevice()) {
      // √éncarcƒÉ vocile disponibile
      speechSynthesis.getVoices();
      
      // A»ôteaptƒÉ pu»õin pentru a se √ÆncƒÉrca vocile
      setTimeout(() => {
        if (boosted) {
          console.log("üîä Declan»ôez vocea dupƒÉ interac»õiunea utilizatorului");
          speakAmount(boosted);
        }
      }, 500);
    } else {
      // Pentru desktop
      if (boosted) {
        speakAmount(boosted);
      }
    }
  };

  // Func»õie pentru evenimente touch (pentru Chrome pe mobil)
  const handleVoiceButtonTouch = (e) => {
    e.preventDefault(); // Previne comportamentul implicit
    e.stopPropagation(); // Opre»ôte propagarea evenimentului
    console.log("üëÜ Touch event detectat pe butonul de voce");
    
    // AdaugƒÉ un mic delay pentru a evita double-tap
    setTimeout(() => {
      handleVoiceButtonClick();
    }, 100);
  };

  // Func»õie pentru afi»ôarea notificƒÉrii de v√¢nzare nouƒÉ
  const showNewSaleNotification = (increaseAmount) => {
    // Reducere de 25% pentru a face sumele mai mici
    const adjustedAmount = increaseAmount * 0.75;
    
    const formattedAmount = new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 2,
      maximumFractionDigits: 2
    }).format(adjustedAmount);

    // ‚úÖ Folosim suma pentru a genera aceea»ôi »õarƒÉ »ôi crypto pe toate dispozitivele
    const countryForAmount = getCountryForAmount(adjustedAmount);
    const cryptoForAmount = getCryptoForAmount(adjustedAmount);

    // For»õeazƒÉ re-animarea prin schimbarea cheii
    setNotificationKey(prev => prev + 1);

    setNewSaleNotification({
      text: `New presale participant spotted!`,
      country: `Payment located: `,
      countryName: countryForAmount,
      geolocation: `(IP-based geolocation)`,
      amount: `+${formattedAmount}`,
      crypto: cryptoForAmount,
      rawAmount: adjustedAmount
    });

    // Notificarea rƒÉm√¢ne vizibilƒÉ p√¢nƒÉ c√¢nd apare o nouƒÉ v√¢nzare
    // Nu mai avem setTimeout - se va ascunde doar c√¢nd se apeleazƒÉ din nou showNewSaleNotification
  };

  // Func»õie pentru for»õarea √ÆncƒÉrcƒÉrii vocilor √Æn Chrome
  const forceLoadVoices = () => {
    if ('speechSynthesis' in window) {
      // For»õeazƒÉ √ÆncƒÉrcarea vocilor
      speechSynthesis.getVoices();
      
      // Pentru Chrome - vocile se √ÆncarcƒÉ asincron
      if (speechSynthesis.onvoiceschanged) {
        speechSynthesis.onvoiceschanged = () => {
          const voices = speechSynthesis.getVoices();
          console.log(`üé§ Vocile √ÆncƒÉrcate: ${voices.length} disponibile`);
        };
      }
      
      // Pentru mobil - √ÆncarcƒÉ vocile din nou dupƒÉ un delay
      if (isMobileDevice()) {
        setTimeout(() => {
          speechSynthesis.getVoices();
        }, 1000);
      }
    }
  };

  // Reset flag doar la primul load al componentei
  useEffect(() => {
    // ResetƒÉm flag-ul doar la primul load
    hasSpokenRef.current = false;
    
    // For»õeazƒÉ √ÆncƒÉrcarea vocilor
    forceLoadVoices();
  }, []);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const res = await fetch(`${API_URL}/api/presale/current`);
        const data = await res.json();

        if (data.totalBoosted) {
          const newBoosted = data.totalBoosted;

          if (prevBoosted.current !== null && newBoosted > prevBoosted.current) {
            const increaseAmount = newBoosted - prevBoosted.current;
            
            console.log(`üéâ NOUƒÇ V√ÇNZARE DETECTATƒÇ: +$${increaseAmount.toFixed(2)}`);
            
            const audio = new Audio("/sounds/boost.wav");
            audio.play().catch((err) =>
              console.warn("üîá Eroare la redare boost.wav:", err)
            );
            
            // ActiveazƒÉ efectul wow
            triggerWowEffect();
            
            // Afi»ôeazƒÉ notificarea de v√¢nzare nouƒÉ
            showNewSaleNotification(increaseAmount);
          }

          prevBoosted.current = newBoosted;
          setBoosted(newBoosted);
          
                     // Cite»ôte suma doar la prima √ÆncƒÉrcare a datelor
           if (newBoosted > 0 && !hasSpokenRef.current) {
             console.log(`üé§ Citire vocalƒÉ la primul load: ${newBoosted}`);
             hasSpokenRef.current = true;
             setTimeout(() => {
               speakAmount(newBoosted);
             }, 2000); // A»ôteaptƒÉ 2 secunde dupƒÉ √ÆncƒÉrcare
           }
           
           // For»õeazƒÉ interac»õiunea pe mobil dupƒÉ √ÆncƒÉrcarea datelor
           if (newBoosted > 0 && isMobileDevice()) {
             setTimeout(() => {
               forceUserInteraction();
             }, 3000); // A»ôteaptƒÉ 3 secunde dupƒÉ √ÆncƒÉrcare
           }
        }
      } catch (err) {
        console.error("‚ùå Failed to fetch boost data:", err);
      }
    };

    const delayTimer = setTimeout(fetchData, 3000);
    const interval = setInterval(fetchData, 10000);
    
    // Efect wow periodic - la fiecare 15 secunde
    const wowInterval = setInterval(triggerWowEffect, 15000);

    return () => {
      clearTimeout(delayTimer);
      clearInterval(interval);
      clearInterval(wowInterval);
    };
  }, []);

  return (
    <div className="total-boosted-banner">
      <img src="/logo.png" alt="BITS Logo" className="bits-logo-floating" />
      <span className="boosted-label">Launch Power Raised:</span>
      {boosted === null ? (
        <span className="shimmer-loader">‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà</span>
      ) : (
        <span className={`boosted-amount ${showWowEffect ? showWowEffect : ''}`}>
          <CountUp
            end={boosted}
            duration={2}
            separator=","
            prefix="$"
            decimals={2}
          />
        </span>
      )}
      
      {/* Butonul pentru voce pe mobil */}
      {showVoiceButton && isMobileDevice() && (
        <button 
          className="voice-button-mobile"
          onClick={handleVoiceButtonClick}
          onTouchStart={handleVoiceButtonTouch}
          onTouchEnd={(e) => e.preventDefault()}
          onMouseDown={(e) => e.preventDefault()}
          title="Tap to hear project info"
          style={{
            touchAction: 'manipulation',
            WebkitTapHighlightColor: 'transparent',
            WebkitUserSelect: 'none',
            userSelect: 'none',
            cursor: 'pointer'
          }}
        >
          üîä
        </button>
      )}
      
      {/* Notificarea de v√¢nzare nouƒÉ */}
      {newSaleNotification && (
        <div key={notificationKey} className="new-sale-notification">
          <span className="notification-text">{newSaleNotification.text}</span>
          <span className="notification-amount">{newSaleNotification.amount}</span>
          {newSaleNotification.crypto && (
            <span className="notification-crypto">
              <span className="crypto-label">via </span>
              <span 
                className="crypto-symbol" 
                style={{ color: newSaleNotification.crypto.color }}
              >
                {newSaleNotification.crypto.symbol}
              </span>
              <span className="crypto-name"> ({newSaleNotification.crypto.name})</span>
            </span>
          )}
          <span className="notification-country">
            {newSaleNotification.country}
            <span className="notification-country-name">{newSaleNotification.countryName}</span>
          </span>
          <span className="notification-geolocation">
            {newSaleNotification.geolocation}
            <span className="google-maps-icon">üìç Google Maps</span>
          </span>
        </div>
      )}
    </div>
  );
};

export default BoostedBanner;
